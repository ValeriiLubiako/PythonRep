# Program002.py
# Содержит функции, с помощью которых реализуются операции ввода-вывода

def salute():
#   Выводит на консоль меню выпоняемых операций в соответствием с условиями задачи
#   Возвращает символ (цифру, соответствующую целому числу в диапазоне от 1 до 7),
#   с помощью которого идентифицируется выбранный пункт меню
# 
#   Выполняется проверка введенныхзначений на принадлежность к области допустимых значений (1-7) 
#   Предусмотрена возможность принудительного выхода из цикла по комбинации клавиш Ctrl+Z, Enter
#    
    print("\n>>>>>>>------>>>>>>>>>>------>>>>>>>>>\n" +
          "Меню работы с записной книжкой.\n" +
          "Введите соответствующую выбранной операции цифру из списка:\n" +
          "- найти контакт/find contact: 1;\n" +
          "- добавить контакт/add contact: 2;\n" +
          "- просмотреть список контактов/list contacts: 3;\n" +
          "- внести изменения в контакт/upate contact: 4;\n" +
          "- удалить контакт/delete contact: 5;\n" +
          "- удалить ВЕСЬ список контактов/delete CONTACT LIST: 6;\n" +
          "- выйти из меню/escape: 7;\n")
    Flag = True
    while Flag:
        try:

            cn = input("-> ")
            n = int(cn)
            if n < 0:    # при ошибочном вводе отрицательно числа берется его значеие по абсолютной величине
                n *= (-1)
            Flagin = True

# Если полученный ввод не число, будет вызвано исключение
        except ValueError:
            # Цикл будет повторяться до правильного ввода
            print("Error! Это не число, попробуйте снова.")

        # При успешном преобразовании в целое число,
        # цикл закончится.
        except EOFError:
            print("EOFError! Выходим из меню...")
            FlagProgTermination = False
            break
        else:
            if n > 7 or n == 0:
                print("Error! Допустимые значения от 1 до 7, попробуйте снова.")
            else:
                return n

# End of salute

#   print(salute())


def input_contact():
#   Позволяет ввести с консоли значения фамилии, имени, отчества и номера телефона
#   Проверяет обязателное заполнение поля "Фамилия", остальные позиции могут оставаться незапоолненными
#   
#   Возвращает символьную строку, построенную в формате, предназначенном для занесения в файл:
#   введенные значения разделенные символом ";". Символ окончания строки "\n" будет проставлен в вызывающей
#   функции, после того, как в ней будет дописан порядковый номер записи, добавляемой к файлу.
#
    name = ""
    name = input("Name: ")
    if len(name) < 2:
        input("Поле Фамилия является обязательным для ввода а длина значения не может быть меньше 2 символов!!!!")
        return name
    else:
        return name + ";" + input("FirstName: ") + ";" + input("Patronimic: ") + ";" + input("PhoneNo: ")


def inp_newdata_contact(name, line_number):
#   Позволяет ввести с консоли значения имени, отчества и номера телефона
#   предназначенные для замены хранящихся в файле. Фамилию, поскольку она является поисковым ключом,
#   менять не допускается, только путем удаления записи и ее повторного ввода заново.
#   На входе первым параметром принамает значение поля фамилия (поскольку оно не может быть изменено по условию задачи),
#   вторым параметром - номер корректируемой строки (используется для того, чтобы полностью сформировать новое значение 
#   строки-корректируемой записи файла).
#   Возвращает символьную строку, полностью подготовленную для занесения в файл:
#   Допускается  принудительный выход с возвратом к основному меню по комбинации клавиш Ctrl+Z и Enter.
#
    print("Введите новые значения имени, отчества или номера телефона")
    print(">>>>-------->>>>>------->>>>>")
    try:
        return name + ";" + input("FirstName: ") + ";" + input("Patronimic: ") + ";" + input("PhoneNo: ") + ";" + str(line_number)
    except EOFError:
        pass
    else:
        pass


def inp_seek_contact():
    # Позволяет ввести с консоли символьную строку для поиска записи по вхождению этой строки в фамилию
    # Возвращается введенная строка символов
    # Допускается  принудительный выход с возвратом к основному меню по комбинации клавиш Ctrl+Z и Enter.

    try:
        name = input('Ищем по фамилии (на вхождение введенной строки): ')
    except EOFError:
        name = ""  # чтобы присвоить тип name, 'NoneType' has no len()
     #       input("EOFError! Для продолжения нажмите клавишу Enter...")
    else:
        pass
    return name


def inp_delete_contact():
    # Позволяет ввести с консоли символьную строку для поиска записи по вхождению этой строки в фамилию
    # Возвращается введенная строка символов
    # Допускается  принудительный выход с возвратом к основному меню по комбинации клавиш Ctrl+Z и Enter.
    # Возможно в будущем будет заменена на inp_seek_contact()
    try:
        name = input('Введите фамилию удаляемого контакта: ')
    except EOFError:
        name = ""  # чтобы присвоить тип name, 'NoneType' has no len()
     #       input("EOFError! Для продолжения нажмите клавишу Enter...")
    else:
        pass
    return name


def inp_update_contact():
    # Позволяет ввести с консоли символьную строку для поиска записи по вхождению этой строки в фамилию
    # Возвращается введенная строка символов
    # Допускается  принудительный выход с возвратом к основному меню по комбинации клавиш Ctrl+Z и Enter.
    # Возможно в будущем будет заменена на inp_seek_contact()
    try:
        name = input('Введите фамилию изменяемого контакта: ')
    except EOFError:
        name = ""  # чтобы присвоить тип name, 'NoneType' has no len()
     #       input("EOFError! Для продолжения нажмите клавишу Enter...")
    else:
        pass
    return name
