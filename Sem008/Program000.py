# https://docs-python.ru/tutorial/metody-fajlovogo-obekta-potoka-python/metod-file-read/
# https://pythonz.net/references/named/str.lstrip/
# https://ru.hexlet.io/courses/python-basics
# https://ru.hexlet.io/my?confirmation_token=RTdJwztyppjCuztfUgLhIA
# https://www.online-python.com/
#
#  file.close() - Закрывает открытый файл, освобождая ресурсы системы
#                   Любая операция, которая требует, чтобы файл был открыт, вызовет исключение ValueError после того, как файл был закрыт. 
#  file.flush() - Освобождает буфер чтения и сбрасывает данные в файл Возвращает количество буферизованных символов или байт (целое число int).
#  file.fileno() - Получает файловый дескриптор открытого файла. Возвращает целочисленный файловый дескриптор (int).
#  file.isatty() - Проверяет связь с терминальным устройством (tty). Возвращает True если файл подключен/связан с терминальным устройством tty
#  file.read([size]) - Читает сразу весь файл или делит файл на куски. Возвращает строку в текстовом режиме или байтовый объект в двоичном режиме
#  file.readline([size]) - Производит чтение одной строки из файла. Возвращает строку в текстовом режиме или байтовый объект в двоичном режиме.
#  file.readlines([sizehint]) - Читает файл целиком, получает список строк из файла. Возвращает список строк в текстовом режиме
#  или байтовых объектов в двоичном режиме.Конечный символ новой строки \n сохраняется в строке.
#  file.seek(offset[, whence]) - Перемещает указатель чтения/записи в файле. Возвращает новую позицию указателя (int).
#  file.tell() - Получает текущую позицию указателя чтения/записи файла. Возвращает текущую позицию указателя (int).
#  file.truncate([size]) - Ограничить размер записываемого файла. Возвращает количество символов или байт (int).
#  file.write(str) - Записывает переданную строку/данные в файл. Возвращает количество записанных символов или байт.
#  file.writelines(sequence) - Записывает список строк в файл 
#
#  str.rstrip([chars]) -> str - Возвращает копию указанной строки, с конца которой устранены указанные символы  ('abca'.rstrip('ac')  # 'ab').
#  str.strip([chars]) -> str - Возвращает копию указанной строки, с обоих концов которой устранены указанные символы.
#  str.lstrip([chars]) -> str - Возвращает копию указанной строки, с начала (слева l — left) которой устранены указанные символы.
#
#  fp = open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
#       file - это строка, определяющая абсолютное или относительное расположение открываемого файла в файловой системе
#                           или целочисленный файловый дескриптор файла. 
#       mode - необязательно, строка, которая указывает режим, в котором открывается файл. По умолчанию 'r'.
#
#   >>>>>>>>>>>>>
#   Значения аргумента mode:
#       
#   r - открывает файл только для чтения,
#   w - открыт для записи (перед записью файл будет очищен),
#   x - эксклюзивное создание, бросается исключение FileExistsError, если файл уже существует.
#   a - открыт для добавления в конец файла (на некоторых Unix-системах пишет в конец файла вне зависимости от позиции курсора)
#   + - символ обновления (чтение + запись).
#   t - символ текстового режима.
#   b - символ двоичного режима (для операционных систем, которые различают текстовые и двоичные файлы).
#  >>>>>>>>>>>>>>
#       buffering - необязательно, целое число, используемое для установки политики буферизации.
#       encoding - необязательно, кодировка, используемая для декодирования или кодирования файла. 
#       newline - необязательно, режим перевода строк. Варианты: None, '\n', '\r' и '\r\n'. Следует использовать только для текстовых файлов.
#       closefd - необязательно, bool, флаг закрытия файлового дескриптора.
#       opener - необязательно, пользовательский объект, возвращающий открытый дескриптор файла.
#
#       Функция open() открывает файл для чтения или записи при помощи файлового потока. Если файл не может быть открыт, бросается исключение OSError.
#
#

def add_contact():
    contact = [input("Name: ") + ";", input("FirstName: ") + ";", input("Patronimic: ") + ";", input("PhoneNo: " ) + "\n" ]
    print (*contact)
    with open("file.txt", "a") as fa:
        fa.writelines(contact)
        fa.close()
    
def seek_contact():
    with open("file.txt","r") as fr:
        seekpattern = input("Seek: ")
        
#        contact = []
        contact = fr.readlines()
        for x in contact:
            if seekpattern in x:
                print(x)
        fr.close()
        print(*contact)
        
        
add_contact()
seek_contact()

